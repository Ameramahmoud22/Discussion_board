                  Django MVT Architecture Explained
1️ What is MVT?

MVT stands for Model – View – Template.

It’s Django’s version of the MVC (Model – View – Controller) pattern used in web development.

Django automatically handles most of the “controller” part internally, which simplifies development.

2️⃣ Model

The Model is responsible for data and database operations.

It defines the structure of your data (like a table in a database).

Each model is a Python class that subclasses django.db.models.Model.

Django automatically creates database tables from your models using migrations.
Purpose:
Defines what data is stored and how it is stored.
---------------------------------------------------------
3️⃣ View

The View contains the business logic of your application.

It interacts with the Model to retrieve, process, and send data to the Template.

A view receives an HTTP request and returns an HTTP response.

In Django, views are written as functions or class-based views.
Purpose:
Controls what data to show and which template to use for rendering.
-------------------------------------------------------------
4️⃣ Template

The Template handles the presentation layer (UI).

It’s usually an HTML file that displays the data sent from the View.

Django’s template language allows adding dynamic content like loops and conditions.
Purpose:
Defines how the data is displayed to the user.
----------------------------------------------------------------
5️⃣ How They Work Together

User sends a request (Ex: visiting /boards/).

URL Dispatcher maps the request to a specific View.

View interacts with the Model to get data from the database.

View passes the data to a Template.

Template renders the data into HTML and sends it back as a response to the user.

the flow : User → URL → View → Model → Template → Response → User
-------------------------------------------------------------------------------------------------------------------

















Explain The folder structure in Django project :

Discussion_board folder structure " Our project Name"

1- init.py => marks the directory as a Python package. [handle all python packages]
2- settings.py => main configuration (INSTALLED_APPS, DATABASES, SECRET_KEY, DEBUG, TEMPLATES, STATIC). 
   Edit here for environment and app settings. [control all my app ] 
   "ده اللى فيه حاجات كتير جاهزة زى ال authentication , sessions ......  "

3-urls.py => root URL router; include app urlconfs and top-level routes here. [control mapping of pages]

4-wsgi.py => WSGI app used in production (Gunicorn/uWSGI); entry point for synchronous servers.|both for
5-asgi.py => ASGI app for async servers (channels, websockets)                                 |deployment

---------------------------------------------------------------

6- manage.py => CLI entry: runserver, migrate, createsuperuser; sets DJANGO_SETTINGS_MODULE.
   " Used to run your project , deal with DB with migrations , test cases ,and so on" 
   " manage any commands"

-----------------------------------------------------------------
7-boards folder structure " for handling boards we will upload articles on it"

7.1 - init.py => marks the folder as a Python package so Django can import it [all packages]
7.2-  apps.py  => AppConfig class (app name, ready() hook for startup tasks such as signal registration). [it's like settings.py in the main project ]
7.3- admin.py  => register models here so they appear and are manageable in Django admin. [as you know that django has a built in panel on it so this file help you manage this admin panel ]
7.4- models.py => define database models (e.g., Board, Topic, Post); maps Python classes to DB tables.
7.5- migrations => auto-generated DB migration files (0001_initial.py, etc.) that track schema changes.
7.6- forms.py => Django forms and ModelForms for validating input and rendering form HTML.
7.7- views.py => request handlers (function-based or class-based views) that return responses/templates.
----------------------------------------------------------------------
8- templates folder: contain the all HTML files we will use in the project
----------------------------------------------------------------------
9- Static folder : contain all css , js , fonts and so on 
----------------------------------------------------------------------
10- base.html file : is considered as a common container between all html files as we put on it all common scripts of code 
                     so it will not be replicated  [for example : header , footer and logo of any projct ] 
يعتبر زى قالب شترك ما بين كل الصفحات زى مثلا الفريم بتاع الصورة ممكن استخدم نفس الفريم لاكتر من صورة ولكن اللى بيتغير الصورة نفسها
------------------------------------------------------------------------
note(1): django models by defult has id [unique , auto incremented] so you don't need to add it 

note(2) : 